// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ob.DataAccess;

#nullable disable

namespace ob.DataAccess.Migrations
{
    [DbContext(typeof(AppContext))]
    partial class AppContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ob.Domain.Categoria", b =>
                {
                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Nombre");

                    b.ToTable("Categorias");
                });

            modelBuilder.Entity("ob.Domain.Constructora", b =>
                {
                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Nombre");

                    b.ToTable("Constructoras");
                });

            modelBuilder.Entity("ob.Domain.Depto", b =>
                {
                    b.Property<int>("Numero")
                        .HasColumnType("int");

                    b.Property<string>("EdificioNombre")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EdificioDireccion")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CantidadBanos")
                        .HasColumnType("int");

                    b.Property<int>("CantidadCuartos")
                        .HasColumnType("int");

                    b.Property<bool>("ConTerraza")
                        .HasColumnType("bit");

                    b.Property<string>("DuenoEmail")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Piso")
                        .HasColumnType("int");

                    b.HasKey("Numero", "EdificioNombre", "EdificioDireccion");

                    b.HasIndex("DuenoEmail");

                    b.HasIndex("EdificioNombre", "EdificioDireccion");

                    b.ToTable("Deptos");
                });

            modelBuilder.Entity("ob.Domain.Dueno", b =>
                {
                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Email");

                    b.ToTable("Duenos");
                });

            modelBuilder.Entity("ob.Domain.Edificio", b =>
                {
                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Direccion")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EncargadoEmail")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("GastosComunes")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Ubicación")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Nombre", "Direccion");

                    b.HasIndex("EncargadoEmail");

                    b.ToTable("Edificios");
                });

            modelBuilder.Entity("ob.Domain.Invitacion", b =>
                {
                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("FechaExpiracion")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Email");

                    b.ToTable("Invitaciones");
                });

            modelBuilder.Entity("ob.Domain.Session", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("AuthToken")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UsuarioEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioEmail");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("ob.Domain.Solicitud", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoriaNombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DeptoEdificioDireccion")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DeptoEdificioNombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("DeptoNumero")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Estado")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FechaFin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("datetime2");

                    b.Property<string>("PerManEmail")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaNombre");

                    b.HasIndex("PerManEmail");

                    b.HasIndex("DeptoNumero", "DeptoEdificioNombre", "DeptoEdificioDireccion");

                    b.ToTable("Solicitudes");
                });

            modelBuilder.Entity("ob.Domain.Usuario", b =>
                {
                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Contrasena")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Email");

                    b.ToTable("Usuarios");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Usuario");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("ob.Domain.Administrador", b =>
                {
                    b.HasBaseType("ob.Domain.Usuario");

                    b.HasDiscriminator().HasValue("Administrador");
                });

            modelBuilder.Entity("ob.Domain.Encargado", b =>
                {
                    b.HasBaseType("ob.Domain.Usuario");

                    b.HasDiscriminator().HasValue("Encargado");
                });

            modelBuilder.Entity("ob.Domain.Mantenimiento", b =>
                {
                    b.HasBaseType("ob.Domain.Usuario");

                    b.HasDiscriminator().HasValue("Mantenimiento");
                });

            modelBuilder.Entity("ob.Domain.Depto", b =>
                {
                    b.HasOne("ob.Domain.Dueno", "Dueno")
                        .WithMany()
                        .HasForeignKey("DuenoEmail");

                    b.HasOne("ob.Domain.Edificio", null)
                        .WithMany("Deptos")
                        .HasForeignKey("EdificioNombre", "EdificioDireccion");

                    b.Navigation("Dueno");
                });

            modelBuilder.Entity("ob.Domain.Edificio", b =>
                {
                    b.HasOne("ob.Domain.Encargado", null)
                        .WithMany("Edificios")
                        .HasForeignKey("EncargadoEmail");

                    b.HasOne("ob.Domain.Constructora", "EmpresaConstructora")
                        .WithMany()
                        .HasForeignKey("Nombre")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmpresaConstructora");
                });

            modelBuilder.Entity("ob.Domain.Session", b =>
                {
                    b.HasOne("ob.Domain.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioEmail")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("ob.Domain.Solicitud", b =>
                {
                    b.HasOne("ob.Domain.Categoria", "Categoria")
                        .WithMany()
                        .HasForeignKey("CategoriaNombre")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ob.Domain.Mantenimiento", "PerMan")
                        .WithMany()
                        .HasForeignKey("PerManEmail");

                    b.HasOne("ob.Domain.Depto", "Depto")
                        .WithMany()
                        .HasForeignKey("DeptoNumero", "DeptoEdificioNombre", "DeptoEdificioDireccion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categoria");

                    b.Navigation("Depto");

                    b.Navigation("PerMan");
                });

            modelBuilder.Entity("ob.Domain.Edificio", b =>
                {
                    b.Navigation("Deptos");
                });

            modelBuilder.Entity("ob.Domain.Encargado", b =>
                {
                    b.Navigation("Edificios");
                });
#pragma warning restore 612, 618
        }
    }
}
